//
//  NeoCryptoTests.swift
//  NeoSwiftTests
//
//  Created by Luís Silva on 16/09/17.
//  Copyright © 2017 drei. All rights reserved.
//

import XCTest

class NeoCryptoTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Base58
    
    func testBase58Encoding() {
        
        
        XCTAssert("derp".base58EncodedString == "3ZqqXd")
        XCTAssert("1".base58EncodedString == "r")
        XCTAssert("the quick brown fox".base58EncodedString == "NK2qR8Vz63NeeAJp9XRifbwahu")
        XCTAssert("THE QUICK BROWN FOX".base58EncodedString == "GRvKwF9B69ssT67JgRWxPQTZ2X")
        
    }
    
    func testBase58Decoding() {
        
        
        XCTAssert(String(data: "3ZqqXd".base58DecodedData!, encoding: .utf8) == "derp")
        XCTAssert(String(data: "r".base58DecodedData!, encoding: .utf8) == "1")
        XCTAssert(String(data: "NK2qR8Vz63NeeAJp9XRifbwahu".base58DecodedData!, encoding: .utf8) == "the quick brown fox")
        XCTAssert(String(data: "GRvKwF9B69ssT67JgRWxPQTZ2X".base58DecodedData!, encoding: .utf8) == "THE QUICK BROWN FOX")
    }
    
    // MARK: Base58Check
    
    func testBase58CheckEncoding() {
        let d1 = "00010966776006953D5567439E5E39F86A0D273BEE".dataWithHexString().bytes
        XCTAssert(d1.base58CheckEncodedString == "16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM")

        let d2 = "005C092BF62192E10F71E96A8B7E39C437BABEB8C9".dataWithHexString().bytes
        XCTAssert(d2.base58CheckEncodedString == "19Pe9uqYgFYTVZMZYvXTTecitzyVDfxr9m")
    }
    
    func testBase58CheckDecoding() {
        XCTAssert("19Pe9uqYgFYTVZMZYvXTTecitzyVDfxr9m".base58CheckDecodedData == "005C092BF62192E10F71E96A8B7E39C437BABEB8C9".dataWithHexString())
    }
    
    // MARK: - SHA256
    
    func testSHA256() {
        XCTAssert("".sha256?.fullHexString == "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
        XCTAssert("NEO".sha256?.fullHexString == "1a259dba256600620c6c91094f3a300b30f0cbaecee19c6114deffd3288957d7")
        XCTAssert("Smart Economy".sha256?.fullHexString == "6c4cb281896c7779f4e2800471638026d52178b2556a0a3fbc3673368ba97385")
    }
    
    // MARK: - AES
    
    func testAES256() {
        // key, plain, cipher
        let tests = [
            ["603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "6BC1BEE22E409F96E93D7E117393172A", "F3EED1BDB5D2A03C064B5A7E3DB181F8"],
            ["603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "AE2D8A571E03AC9C9EB76FAC45AF8E51", "591CCB10D410ED26DC5BA74A31362870"],
            ["603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4", "30C81C46A35CE411E5FBC1191A0A52EF", "B6ED21B99CA6F4F9F153E7B1BEAFED1D"]
        ]
        
        for test in tests {
            let key = test[0].dataWithHexString().bytes
            let plain = test[1].dataWithHexString().bytes
            let cipher = test[2].dataWithHexString().bytes

            let r1 = AES.encrypt(bytes: plain, key: key, keySize: .keySize256, pkcs7Padding: false)
            XCTAssert(r1 == cipher)
            
            let r2 = AES.decrypt(bytes: cipher, key: key, keySize: .keySize256, pkcs7Padding: false)
            XCTAssert(r2 == plain)
        }
    }
    
    // MARK: - PBKDF2
    
    func testPBKFD2() {
        let r1 = PBKDF2.deriveKey(password: [UInt8]("passwd".utf8), salt: [UInt8]("salt".utf8), rounds: 1, keyLength: 64)
        XCTAssert(r1 == [0x55, 0xac, 0x04, 0x6e, 0x56, 0xe3, 0x08, 0x9f, 0xec, 0x16, 0x91, 0xc2, 0x25, 0x44, 0xb6, 0x05, 0xf9, 0x41, 0x85, 0x21, 0x6d, 0xde, 0x04, 0x65, 0xe6, 0x8b, 0x9d, 0x57, 0xc2, 0x0d, 0xac, 0xbc, 0x49, 0xca, 0x9c, 0xcc, 0xf1, 0x79, 0xb6, 0x45, 0x99, 0x16, 0x64, 0xb3, 0x9d, 0x77, 0xef, 0x31, 0x7c, 0x71, 0xb8, 0x45, 0xb1, 0xe3, 0x0b, 0xd5, 0x09, 0x11, 0x20, 0x41, 0xd3, 0xa1, 0x97, 0x83])
    
        let r2 = PBKDF2.deriveKey(password: [UInt8]("Password".utf8), salt: [UInt8]("NaCl".utf8), rounds: 80000, keyLength: 64)
        XCTAssert(r2 == [0x4d, 0xdc, 0xd8, 0xf6, 0x0b, 0x98, 0xbe, 0x21, 0x83, 0x0c, 0xee, 0x5e, 0xf2, 0x27, 0x01, 0xf9, 0x64, 0x1a, 0x44, 0x18, 0xd0, 0x4c, 0x04, 0x14, 0xae, 0xff, 0x08, 0x87, 0x6b, 0x34, 0xab, 0x56, 0xa1, 0xd4, 0x25, 0xa1, 0x22, 0x58, 0x33, 0x54, 0x9a, 0xdb, 0x84, 0x1b, 0x51, 0xc9, 0xb3, 0x17, 0x6a, 0x27, 0x2b, 0xde, 0xbb, 0xa1, 0xd0, 0x78, 0x47, 0x8f, 0x62, 0xb3, 0x97, 0xf3, 0x3c, 0x8d])
    }
    
    // MARK: - scrypt
    
    func testSalsa() {
        let input: [UInt8] = [
            0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
            0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
            0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
            0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29, 0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e
        ]
        let output: [UInt8] = [
            0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
            0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
            0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
            0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c, 0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81
        ]
        
        let inputWords = input.toWordArray()
        
        var outputWords: [UInt32] = Array<UInt32>(repeating: 0, count: 16)
        scrypt().salsa(inputWords, output: &outputWords)
        let outBytes = outputWords.toByteArray()
        
        XCTAssert(outBytes == output)
    }
    
    func testScryptBlockMix() {
//        INPUT
//        B[0] =  f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd
//        77 76 16 db bb 27 a7 0e 82 04 f3 ae 2d 0f 6f ad
//        89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29
//        09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7
//
//        B[1] =  89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb
//        cd 98 43 80 37 46 66 bb 8f fc b5 bf 40 c2 54 b0
//        67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57 1b
//        7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89
//
//        OUTPUT
//        B'[0] = a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05
//        04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29
//        b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba
//        e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81
//
//        B'[1] = 20 ed c9 75 32 38 81 a8 05 40 f6 4c 16 2d cd 3c
//        21 07 7c fe 5f 8d 5f e2 b1 a4 16 8f 95 36 78 b7
//        7d 3b 3d 80 3b 60 e4 ab 92 09 96 e5 9b 4d 53 b6
//        5d 2a 22 58 77 d5 ed f5 84 2c b9 f1 4e ef e4 25
        
        let B: [UInt8] = [
            0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
            0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
            0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
            0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
            
            0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
            0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
            0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
        ]
        
        let B_: [UInt8] = [
            0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
            0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
            0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
            0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c, 0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
            
            0x20, 0xed, 0xc9, 0x75, 0x32, 0x38, 0x81, 0xa8, 0x05, 0x40, 0xf6, 0x4c, 0x16, 0x2d, 0xcd, 0x3c,
            0x21, 0x07, 0x7c, 0xfe, 0x5f, 0x8d, 0x5f, 0xe2, 0xb1, 0xa4, 0x16, 0x8f, 0x95, 0x36, 0x78, 0xb7,
            0x7d, 0x3b, 0x3d, 0x80, 0x3b, 0x60, 0xe4, 0xab, 0x92, 0x09, 0x96, 0xe5, 0x9b, 0x4d, 0x53, 0xb6,
            0x5d, 0x2a, 0x22, 0x58, 0x77, 0xd5, 0xed, 0xf5, 0x84, 0x2c, 0xb9, 0xf1, 0x4e, 0xef, 0xe4, 0x25
        ]
        
        let bWords: [UInt32] = B.toWordArray()
        
        XCTAssert(scrypt().scryptBlockMix(bWords, r: 1).toByteArray() == B_)
        
    }
    
    func testScryptROMix() {
        let I: [UInt8] = [
            0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
            0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
            0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
            0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
            0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
            0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
            0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
        ]
        
        let O: [UInt8] = [
            0x79, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca, 0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b, 0xf6, 0xb6,
            0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55, 0xfa, 0xfc, 0x61, 0x98, 0xe6, 0xea, 0x2b, 0x46,
            0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29, 0xd6, 0x65, 0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26,
            0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f, 0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71,
            0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a, 0x26, 0x6f, 0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c,
            0xac, 0x0b, 0x9c, 0xf1, 0xbe, 0x2b, 0xff, 0xca, 0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4,
            0xae, 0x12, 0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0, 0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
            0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68, 0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a, 0x4b, 0x8e
        ]
        
        XCTAssert(scrypt().scryptROMix(I, r: 1, N: 16) == O)
    }
    
    func testScrypt() {
        /*
        scrypt (P="", S="",
                N=16, r=1, p=1, dklen=64) =
        77 d6 57 62 38 65 7b 20 3b 19 ca 42 c1 8a 04 97
        f1 6b 48 44 e3 07 4a e8 df df fa 3f ed e2 14 42
        fc d0 06 9d ed 09 48 f8 32 6a 75 3a 0f c8 1f 17
        e8 d3 e0 fb 2e 0d 36 28 cf 35 e2 0c 38 d1 89 06
        
        scrypt (P="password", S="NaCl",
                N=1024, r=8, p=16, dkLen=64) =
        fd ba be 1c 9d 34 72 00 78 56 e7 19 0d 01 e9 fe
        7c 6a d7 cb c8 23 78 30 e7 73 76 63 4b 37 31 62
        2e af 30 d9 2e 22 a3 88 6f f1 09 27 9d 98 30 da
        c7 27 af b9 4a 83 ee 6d 83 60 cb df a2 cc 06 40
        
        scrypt (P="pleaseletmein", S="SodiumChloride",
                N=16384, r=8, p=1, dkLen=64) =
        70 23 bd cb 3a fd 73 48 46 1c 06 cd 81 fd 38 eb
        fd a8 fb ba 90 4f 8e 3e a9 b5 43 f6 54 5d a1 f2
        d5 43 29 55 61 3f 0f cf 62 d4 97 05 24 2a 9a f9
        e6 1e 85 dc 0d 65 1e 40 df cf 01 7b 45 57 58 87
        
        scrypt (P="pleaseletmein", S="SodiumChloride",
                N=1048576, r=8, p=1, dkLen=64) =
        21 01 cb 9b 6a 51 1a ae ad db be 09 cf 70 f8 81
        ec 56 8d 57 4a 2f fd 4d ab e5 ee 98 20 ad aa 47
        8e 56 fd 8f 4b a5 d0 9f fa 1c 6d 92 7c 40 f4 c3
        37 30 40 49 e8 a9 52 fb cb f4 5c 6f a7 7a 41 a4
        
        Aditional scrypt tests for development purposes:
        n 256, r 1, p 1, dkLen 64 -> 5e5d89b8eceb18e5873d76270d4dcb8ea6312344be7a8e88c8b930bad8447f6d668dfc83bdc39c8c9bc4983c4925f87f1fa2fee49007152e1590b1612ef08ce2
        n 256, r 2, p 1, dkLen 64 -> a8a29af9695edff6de9119eaedb0bf8c6679334d17c985a3ef3a945144db9bd9e9770cf80a90a66358cd420bfd7d9fabe828a3fa8cf885b1041fc0bef50977c1
        n 256, r 1, p 2, dkLen 64 -> fa8db48a19a0f9b6498dae9c3588f7a44456cf9805c2f4bf91f627f2f851f3ba3a1ebd419df845c349e944cd981d6d58b8cd5383de0e25f45f940016f12a73c6
        n 256, r 2, p 2, dkLen 64 -> 5eb2a055fc156492d8f5044c159f72fa0a3402d160f08eb7261b8aa6b66dabe64a16b2282453757128adb561e2a8525decac5ba7aa290b0acf019755785b444c
        */
        
        let t0: [UInt8] = [
            0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 0x3b, 0x19, 0xca, 0x42, 0xc1, 0x8a, 0x04, 0x97,
            0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8, 0xdf, 0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42,
            0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48, 0xf8, 0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17,
            0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28, 0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06
        ]
        XCTAssert(scrypt().scrypt(passphrase: [], salt: [], n: 16, r: 1, p: 1, dkLen: 64) == t0)
        
        let t1: [UInt8] = [
            0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01, 0xe9, 0xfe,
            0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30, 0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62,
            0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88, 0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,
            0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d, 0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40
        ]
        XCTAssert(scrypt().scrypt(passphrase: [UInt8]("password".utf8), salt: [UInt8]("NaCl".utf8), n: 1024, r: 8, p: 16, dkLen: 64) == t1)
        
        let t2: [UInt8] = [
            0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48, 0x46, 0x1c, 0x06, 0xcd, 0x81, 0xfd, 0x38, 0xeb,
            0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e, 0xa9, 0xb5, 0x43, 0xf6, 0x54, 0x5d, 0xa1, 0xf2,
            0xd5, 0x43, 0x29, 0x55, 0x61, 0x3f, 0x0f, 0xcf, 0x62, 0xd4, 0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9,
            0xe6, 0x1e, 0x85, 0xdc, 0x0d, 0x65, 0x1e, 0x40, 0xdf, 0xcf, 0x01, 0x7b, 0x45, 0x57, 0x58, 0x87
        ]
        XCTAssert(scrypt().scrypt(passphrase: [UInt8]("pleaseletmein".utf8), salt: [UInt8]("SodiumChloride".utf8), n: 16384, r: 8, p: 1, dkLen: 64) == t2)

        
//        // This test takes a lot of time
//        let t3: [UInt8] = [
//            0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe, 0x09, 0xcf, 0x70, 0xf8, 0x81,
//            0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d, 0xab, 0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47,
//            0x8e, 0x56, 0xfd, 0x8f, 0x4b, 0xa5, 0xd0, 0x9f, 0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3,
//            0x37, 0x30, 0x40, 0x49, 0xe8, 0xa9, 0x52, 0xfb, 0xcb, 0xf4, 0x5c, 0x6f, 0xa7, 0x7a, 0x41, 0xa4
//        ]
//        XCTAssert(scrypt().scrypt(passphrase: [UInt8]("pleaseletmein".utf8), salt: [UInt8]("SodiumChloride".utf8), n: 16384, r: 2, p: 2, dkLen: 64) == t3)
//
    }
    
    func testScryptPerf() {
        let start = Date()
        _ = scrypt().scrypt(passphrase: [UInt8]("password".utf8), salt: [UInt8]("NaCl".utf8), n: 16384, r: 2, p: 2, dkLen: 64)
        print(abs(start.timeIntervalSinceNow))
    }
    
    // MARK: - NEP-2
    
    func testNEP2Encrypt() {
        let account1 = Account(wif: "L44B5gGEpqEDRS9vVPz7QT35jcBG2r3CZwSwQ4fCewXAhAhqGVpP")
        let encryptedKey1 = account1?.exportEncryptedKey(with: "TestingOneTwoThree")
        XCTAssert(encryptedKey1 == "6PYVPVe1fQznphjbUxXP9KZJqPMVnVwCx5s5pr5axRJ8uHkMtZg97eT5kL")
        
        let account2 = Account(wif: "KwYgW8gcxj1JWJXhPSu4Fqwzfhp5Yfi42mdYmMa4XqK7NJxXUSK7")
        let encryptedKey2 = account2?.exportEncryptedKey(with: "Satoshi")
        XCTAssert(encryptedKey2 == "6PYN6mjwYfjPUuYT3Exajvx25UddFVLpCw4bMsmtLdnKwZ9t1Mi3CfKe8S")
    }
    
    func testNEP2Decrypt() {
        let passphrase1 = "TestingOneTwoThree"
        let encryptedKey1 = "6PYVPVe1fQznphjbUxXP9KZJqPMVnVwCx5s5pr5axRJ8uHkMtZg97eT5kL"
        
        let account1 = Account(encryptedPrivateKey: encryptedKey1, passphrase: passphrase1)

        XCTAssert(account1?.wif == "L44B5gGEpqEDRS9vVPz7QT35jcBG2r3CZwSwQ4fCewXAhAhqGVpP")
    }
}

